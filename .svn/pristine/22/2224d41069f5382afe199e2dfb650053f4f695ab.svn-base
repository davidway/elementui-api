package com.blockchain.service.impl;

import java.io.UnsupportedEncodingException;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.blockchain.DTO.UserInfo;
import com.blockchain.DTO.UserKey;
import com.blockchain.VO.UserForm;
import com.blockchain.exception.ServiceException;
import com.blockchain.service.UserService;
import com.blockchain.util.ResultUtil;
import com.blockchain.util.UserUtil;
import com.tencent.trustsql.sdk.TrustSDK;
import com.tencent.trustsql.sdk.bean.PairKey;
import com.tencent.trustsql.sdk.exception.TrustSDKException;
import com.tencent.trustsql.sdk.util.SimpleHttpClient;


@Service
public class UserServiceImpl implements UserService {
	private static Logger logger = Logger.getLogger(UserServiceImpl.class);



	@Override
	public UserKey generatePairKey(UserKey userKeyModel) throws TrustSDKException, UnsupportedEncodingException {

		String privateKey = "";
		String publicKey = "";
		String afterTrustSql = "";
		PairKey pairKey = null;

		pairKey = TrustSDK.generatePairKey(true);
		privateKey = pairKey.getPrivateKey();
		publicKey = pairKey.getPublicKey();
		afterTrustSql = TrustSDK.signString(privateKey, "Tencent TrustSQL".getBytes("UTF-8"), false);

		userKeyModel.setPrivateKey(privateKey);
		userKeyModel.setPublicKey(publicKey);
		userKeyModel.setAfterTrustKey(afterTrustSql);

		return userKeyModel;
	}

	@Override
	public UserInfo add(UserForm userForm) throws ServiceException,UnsupportedEncodingException, TrustSDKException, Exception {
		//申请原始帐号
		UserInfo userInfo = new UserInfo();
		userInfo.setId(userForm.getId());
		userInfo.setName(userForm.getName());
		String userRegistRequestString = UserUtil.generateUserRequest(userInfo,userForm);
		SimpleHttpClient httpClient = new SimpleHttpClient();
		String userRegistResult = httpClient.post("https://baas.trustsql.qq.com/idm_v1.1/api/user_cert/register", userRegistRequestString);
		ResultUtil.checkResultIfSuccess("申请用户", userRegistResult);
		JSONObject userRegistRetData = JSON.parseObject(userRegistResult).getJSONObject("retdata");
	
		//注册原始帐号的账户
		String userBaseAccoutForm = UserUtil.generateuserAccoutForm(userInfo,userRegistRetData, false);
		String userBaseAccountRegistResult = httpClient.post("https://baas.trustsql.qq.com/idm_v1.1/api/account_cert/register", userBaseAccoutForm);
		logger.debug("注册原始帐号的账户返回结果:"+userBaseAccountRegistResult);
		ResultUtil.checkResultIfSuccess("申请账户",userBaseAccountRegistResult);
		JSONObject userAccoutData = JSON.parseObject(userRegistResult).getJSONObject("retdata");
		
		String userBaseAccount = userAccoutData.getString("user_address");
		if ( StringUtils.isBlank(userBaseAccount)){
			userBaseAccount = userAccoutData.getString("account_address");
		}
		userInfo.setBaseAccountAddress(userBaseAccount);
		
		//再设置一个新的账号作为代理账号
		 String userHostAccoutForm = UserUtil.generateuserAccoutForm(userInfo,userRegistRetData, true);
		String userHostAccountFormResult = httpClient.post("https://baas.trustsql.qq.com/idm_v1.1/api/account_cert/register", userHostAccoutForm);
		ResultUtil.checkResultIfSuccess("申请代理账户",userHostAccountFormResult);
		logger.debug("注册申请代理账户返回结果:"+userHostAccountFormResult);
		JSONObject userHostAccoutData = JSON.parseObject(userHostAccountFormResult).getJSONObject("retdata");
		String userHostAccount = userHostAccoutData.getString("user_address");
	
		if ( StringUtils.isBlank(userHostAccount)){
			userHostAccount = userHostAccoutData.getString("account_address");
		}
		userInfo.setHostWalletAccountAddress(userHostAccount);

		return userInfo;
	}

}