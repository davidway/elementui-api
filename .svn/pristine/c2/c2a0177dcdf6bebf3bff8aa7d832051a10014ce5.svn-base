package com.blockchain.util;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.blockchain.DTO.BaseParam;
import com.blockchain.DTO.UserInfo;
import com.blockchain.VO.UserForm;
import com.tencent.trustsql.sdk.TrustSDK;
import com.tencent.trustsql.sdk.bean.AccountCert;
import com.tencent.trustsql.sdk.bean.PairKey;
import com.tencent.trustsql.sdk.bean.RequestData;
import com.tencent.trustsql.sdk.bean.UserCert;
import com.tencent.trustsql.sdk.util.SignUtil;


public class UserUtil {
	
	static boolean isTest= false;

	public static String generateUserRequest(UserInfo userInfo, UserForm userForm) throws Exception {
		String requestString = "";

		RequestData req = new RequestData();

		String sequenceNumber = RequestUtil.getSequenceNumber();
		String mchId = isTest?BaseParam.mchId:ConfigUtils.getMchId();

		String userId = userForm.getId();
		String name = userForm.getName();
		
		
		req.setMch_id(mchId);
		req.setProduct_code("productA");
		req.setSeq_no(sequenceNumber);
		req.setType("sign");
		UserCert user = new UserCert();
		user.setUser_id(userId);
		user.setUser_fullName(name);

		PairKey pairKey = TrustSDK.generatePairKey(true);
		String publicKey = pairKey.getPublicKey();
		user.setPublic_key(publicKey);

		req.setReq_data(JSONObject.toJSONString(user));
		req.setTime_stamp(System.currentTimeMillis() / 1000L);
		
		String prvKey = isTest?BaseParam.create_user_privateKey:ConfigUtils.getCreateUserPrivateKey();
		String signSrc = SignUtil.genSignSrc(req);
		String sign = TrustSDK.signString(prvKey, signSrc.getBytes("UTF-8"), false);
		req.setSign(sign);
		
		userInfo.setBasePrivateKey(pairKey.getPrivateKey());
		userInfo.setBasePublicKey(pairKey.getPublicKey());
		
		
		return JSON.toJSONString(req);
	}

	public static String generateRegisterAccountRequest(UserCert userCert, boolean isHost) throws Exception {
		RequestData req = new RequestData();
		String sqeNo = RequestUtil.getSequenceNumber();
		req.setMch_id(isTest?BaseParam.mchId :ConfigUtils.getMchId());
		req.setProduct_code("productA");
		req.setSeq_no(sqeNo);
		req.setType("sign");
		AccountCert account = new AccountCert();
		account.setUser_id(userCert.getUser_id());
		String publicKey = "";
		if (isHost) {
			PairKey pairKey = TrustSDK.generatePairKey(true);
			publicKey = pairKey.getPublicKey();
			account.setPublic_key(publicKey);
		} else {
			account.setUser_id(userCert.getPublic_key());
		}

		req.setReq_data(JSONObject.toJSONString(account));
		req.setTime_stamp(System.currentTimeMillis() / 1000L);
		String prvKey = isTest?BaseParam.create_user_privateKey :ConfigUtils.getCreateUserPrivateKey();
		// String prvKey = "gaxUIUD76vmEaJwxUZEcqoM0LDESKtpc3M4FDSlPSV0";
		String signSrc = SignUtil.genSignSrc(req);
		System.out.println(signSrc);
		String sign = TrustSDK.signString(prvKey, signSrc.getBytes(), false);
		req.setSign(sign);
		System.out.println(sign);
		return JSONObject.toJSONString(req);
	}

	public static String generateuserAccoutForm(UserInfo userInfo,JSONObject userRegistRetData,boolean isHost) throws Exception {
		String sequenceNumber = RequestUtil.getSequenceNumber();
		
		RequestData req = new RequestData();
		req.setMch_id(isTest?BaseParam.mchId :ConfigUtils.getMchId());
		req.setProduct_code("productA");
		req.setSeq_no(sequenceNumber);
		req.setType("sign");
		AccountCert account = new AccountCert();
		account.setUser_id(userRegistRetData.getString("user_id"));
		String accountPublicKey = userRegistRetData.getString("public_key");
		String accountPrivateKey ="";
		if (isHost) {
			PairKey pairKey = TrustSDK.generatePairKey(true);
			accountPublicKey = pairKey.getPublicKey();
			accountPrivateKey = pairKey.getPrivateKey();
			account.setPublic_key(accountPublicKey);
			userInfo.setHostWalletPublicKey(accountPublicKey);
			userInfo.setHostWalletPrivateKey(accountPrivateKey);
		} else {
			account.setPublic_key(accountPublicKey);
		}

		req.setReq_data(JSONObject.toJSONString(account));
		req.setTime_stamp(System.currentTimeMillis() / 1000L);
		String prvKey =  isTest?BaseParam.create_user_privateKey :ConfigUtils.getCreateUserPrivateKey();
		// String prvKey = "gaxUIUD76vmEaJwxUZEcqoM0LDESKtpc3M4FDSlPSV0";
		String signSrc = SignUtil.genSignSrc(req);
	
		String sign = TrustSDK.signString(prvKey, signSrc.getBytes(), false);
		req.setSign(sign);
	
		return JSONObject.toJSONString(req);
	}

}
