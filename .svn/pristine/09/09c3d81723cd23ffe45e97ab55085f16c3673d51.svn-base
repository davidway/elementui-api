
package com.blockchain.util;
import java.io.UnsupportedEncodingException;
import java.util.Map;
import java.util.TreeMap;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Component;

import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.blockchain.DTO.BaseParam;
import com.blockchain.VO.AccountQueryForm;
import com.blockchain.VO.AssetForm;
import com.blockchain.VO.AssetSettleForm;
import com.blockchain.VO.AssetSettleSubmitForm;
import com.blockchain.VO.AssetSubmitForm;
import com.blockchain.VO.AssetTransQueryForm;
import com.blockchain.VO.AssetTransferForm;
import com.blockchain.VO.AssetTransferSubmitForm;
import com.blockchain.service.AssetService;
import com.tencent.trustsql.sdk.TrustSDK;
import com.tencent.trustsql.sdk.exception.TrustSDKException;
import com.tencent.trustsql.sdk.util.SignStrUtil;



@Component
public class AssetUtil {

	boolean isTest=false;
	
	@Resource
	AssetService assetService;

	private static Logger log = Logger.getLogger(AssetUtil.class);

	public String generateIssueApplyParam(AssetForm assetForm) throws TrustSDKException, Exception {

		String mchId =isTest?BaseParam.mchId:ConfigUtils.getMchId();
		String prvKey = isTest?BaseParam.create_user_privateKey:ConfigUtils.getCreateUserPrivateKey();
		String nodeId = isTest?BaseParam.nodeId:ConfigUtils.getNodeId();
		String chainId = isTest?BaseParam.chainId:ConfigUtils.getChainId();
		String ledgerId =isTest?BaseParam.leadgerId:ConfigUtils.getLedgerId();
		Map<String, Object> paramMap = new TreeMap<String, Object>();
		paramMap.put("version", "1.0");
		paramMap.put("sign_type", "ECDSA");
		paramMap.put("mch_id", mchId);

		paramMap.put("node_id", nodeId);

		paramMap.put("chain_id",chainId);
		paramMap.put("ledger_id",ledgerId );
		paramMap.put("source_id", assetForm.getSourceId());
		paramMap.put("owner_account", assetForm.getCreateUserAccountAddress());
		paramMap.put("asset_type", "1");
		paramMap.put("amount", assetForm.getAmount());
		paramMap.put("unit", assetForm.getUnit());
		JSONObject contentJsonObject = JSONObject.parseObject(assetForm.getContent());
		paramMap.put("content", contentJsonObject);
		paramMap.put("timestamp", System.currentTimeMillis() / 1000);
		paramMap.put("mch_sign", TrustSDK.signString(prvKey, SignStrUtil.mapToKeyValueStr(paramMap).getBytes("UTF-8"), false));
		// generate post data
		JSONObject postJson = new JSONObject(true);
		for (String key : paramMap.keySet()) {
			postJson.put(key, paramMap.get(key));
		}
		return postJson.toJSONString();
	}

	public String generateIssueSubmitParam(AssetSubmitForm assetSubmitForm) throws UnsupportedEncodingException, TrustSDKException, Exception {
	
		String mchId = isTest?BaseParam.mchId:ConfigUtils.getMchId();
		String prvKey = isTest?BaseParam.create_user_privateKey:ConfigUtils.getCreateUserPrivateKey();
		String coinPrivateKey = isTest?BaseParam.coin_privateKey:ConfigUtils.getCoin_privateKey();
		String nodeId =isTest?BaseParam.nodeId:ConfigUtils.getNodeId();
		String chainId = isTest?BaseParam.chainId:ConfigUtils.getChainId();
		String ledgerId = isTest?BaseParam.leadgerId:ConfigUtils.getLedgerId();
		Map<String, Object> paramMap = new TreeMap<String, Object>();
		
		String transactionId = assetSubmitForm.getTransactionId();

		String assetId = assetSubmitForm.getAssetId();
		String tempString = assetSubmitForm.getSignStr();
		
		paramMap.put("version", "1.0");
		paramMap.put("sign_type", "ECDSA");
		paramMap.put("mch_id", mchId);
		paramMap.put("ledger_id", ledgerId);
		paramMap.put("node_id", nodeId);

		paramMap.put("chain_id", chainId);

		paramMap.put("asset_type", 1);

		paramMap.put("transaction_id", transactionId);
		paramMap.put("asset_id", assetId);
		paramMap.put("timestamp", System.currentTimeMillis() / 1000L);

		JSONArray jsonArray = JSONArray.parseArray(tempString);
		JSONArray newArray = new JSONArray();
		for ( int i=0 ; i<jsonArray.size() ; i++){
			JSONObject o = jsonArray.getJSONObject(i);
			String id =o.getString("id");
			String account = o.getString("account");
			String signStr = o.getString("sign_str");
			JSONObject json = new JSONObject(true);
			String sign = TrustSDK.SignRenString(coinPrivateKey, Hex.decodeHex(signStr.toCharArray()));
			
			json.put("sign", sign);
			json.put("id",id );
			json.put("sign_str", signStr);
			json.put("account", account);
		
			
			newArray.add(json);
		}

		paramMap.put("sign_list", newArray);

	

		paramMap.put("mch_sign", TrustSDK.signString(prvKey, SignStrUtil.mapToKeyValueStr(paramMap).getBytes("UTF-8"), false));
		// generate post data
		JSONObject postJson = new JSONObject(true);
		for (String key : paramMap.keySet()) {
			postJson.put(key, paramMap.get(key));
		}

		
		return postJson.toJSONString();

	}

	public String generateAccountQueryParam(AccountQueryForm assetForm) throws TrustSDKException, Exception {
		

		String mchId = isTest?BaseParam.mchId:ConfigUtils.getMchId();
		String prvKey = isTest?BaseParam.create_user_privateKey:ConfigUtils.getCreateUserPrivateKey();
	
		String nodeId =isTest?BaseParam.nodeId:ConfigUtils.getNodeId();
		String chainId = isTest?BaseParam.chainId:ConfigUtils.getChainId();
		String ledgerId = isTest?BaseParam.leadgerId:ConfigUtils.getLedgerId();
		Map<String, Object> paramMap = new TreeMap<String, Object>();
		paramMap.put("version", "1.0");
		paramMap.put("sign_type", "ECDSA");
		paramMap.put("mch_id", mchId);

		paramMap.put("node_id", nodeId);

		paramMap.put("chain_id", chainId);
		paramMap.put("ledger_id", ledgerId);
		if (StringUtils.isNotBlank(assetForm.getAssetAccount())) {
			paramMap.put("asset_account", assetForm.getAssetAccount());
		}
		if (StringUtils.isNotBlank(assetForm.getOwnerUid())) {
			paramMap.put("owner_uid", assetForm.getOwnerUid());
		}
		if (StringUtils.isNotBlank(assetForm.getAssetId())) {
			paramMap.put("asset_id", assetForm.getAssetId());
		}
		paramMap.put("state", assetForm.getState());
		paramMap.put("page_limit", assetForm.getPageLimit());
		paramMap.put("page_no", assetForm.getPageNo());
		paramMap.put("timestamp", System.currentTimeMillis() / 1000);
		paramMap.put("mch_sign", TrustSDK.signString(prvKey, SignStrUtil.mapToKeyValueStr(paramMap).getBytes("UTF-8"), false));
		// generate post data
		JSONObject postJson = new JSONObject();
		for (String key : paramMap.keySet()) {
			postJson.put(key, paramMap.get(key));
		}
		return postJson.toJSONString();
	}

	public String generateTransQueryParam(AssetTransQueryForm assetForm) throws TrustSDKException, Exception {

		JSONArray resultJsonArr = new JSONArray();

		String mchId = isTest?BaseParam.mchId:ConfigUtils.getMchId();
		String prvKey = isTest?BaseParam.create_user_privateKey:ConfigUtils.getCreateUserPrivateKey();
	
		String nodeId =isTest?BaseParam.nodeId:ConfigUtils.getNodeId();
		String chainId = isTest?BaseParam.chainId:ConfigUtils.getChainId();
		String ledgerId = isTest?BaseParam.leadgerId:ConfigUtils.getLedgerId();
		Map<String, Object> paramMap = new TreeMap<String, Object>();
		paramMap.put("version", "1.0");
		paramMap.put("sign_type", "ECDSA");
		paramMap.put("mch_id", mchId);

		paramMap.put("node_id", nodeId);

		paramMap.put("chain_id", chainId);
		paramMap.put("ledger_id", ledgerId);
		if (StringUtils.isNotBlank(assetForm.getSrcAccount())) {
			paramMap.put("src_account", assetForm.getSrcAccount());
		}
		if (StringUtils.isNotBlank(assetForm.getDstAccount())) {
			paramMap.put("dst_account", assetForm.getDstAccount());
		}
		if (StringUtils.isNotBlank(assetForm.getTransactionId())) {
			paramMap.put("transaction_id", assetForm.getTransactionId());
		}

		if (StringUtils.isNotBlank(assetForm.getMonth())) {
			paramMap.put("month", assetForm.getMonth());
		}

		paramMap.put("page_limit", assetForm.getPageLimit());
		paramMap.put("page_no", assetForm.getPageNo());
		paramMap.put("timestamp", System.currentTimeMillis() / 1000);
		paramMap.put("mch_sign", TrustSDK.signString(prvKey, SignStrUtil.mapToKeyValueStr(paramMap).getBytes("UTF-8"), false));
		// generate post data
		JSONObject postJson = new JSONObject();
		for (String key : paramMap.keySet()) {
			postJson.put(key, paramMap.get(key));
		}
		return postJson.toJSONString();
	}

	public String generateTransferApplyParam(AssetTransferForm assetTransferForm) throws TrustSDKException, Exception {

		String mchId = isTest?BaseParam.mchId:ConfigUtils.getMchId();
		String prvKey = isTest?BaseParam.create_user_privateKey:ConfigUtils.getCreateUserPrivateKey();
	
		String nodeId =isTest?BaseParam.nodeId:ConfigUtils.getNodeId();
		String chainId = isTest?BaseParam.chainId:ConfigUtils.getChainId();
		String ledgerId = isTest?BaseParam.leadgerId:ConfigUtils.getLedgerId();
		Map<String, Object> paramMap = new TreeMap<String, Object>();
		paramMap.put("version", "1.0");
		paramMap.put("sign_type", "ECDSA");
		paramMap.put("mch_id", mchId);

		paramMap.put("node_id", nodeId);

		paramMap.put("chain_id", chainId);
		paramMap.put("ledger_id", ledgerId);
		paramMap.put("src_account", assetTransferForm.getSrcAccount());
		paramMap.put("dst_account", assetTransferForm.getDstAccount());
		if (StringUtils.isNotBlank(assetTransferForm.getFeeAccount())) {
			paramMap.put("fee_account", assetTransferForm.getFeeAccount());
		}
		if (null != assetTransferForm.getFeeAmount()) {
			paramMap.put("fee_amount", assetTransferForm.getFeeAmount());
		}
	//TODO 区块链工作人员称暂时不支持多个客户提交
		
		paramMap.put("src_asset_list", assetTransferForm.getSrcAccount());
		
		paramMap.put("asset_type", "1");
		paramMap.put("amount", "" + assetTransferForm.getAmount());
		JSONObject jsonObj = new JSONObject();
		jsonObj.put("测试信息", "呵呵");
		paramMap.put("extra_info", jsonObj);
		paramMap.put("timestamp", System.currentTimeMillis() / 1000L);
		paramMap.put("mch_sign", TrustSDK.signString(prvKey, SignStrUtil.mapToKeyValueStr(paramMap).getBytes("UTF-8"), false));
		// generate post data
		JSONObject postJson = new JSONObject();
		for (String key : paramMap.keySet()) {
			postJson.put(key, paramMap.get(key));
		}
		return postJson.toJSONString();
	}

	

	public String generateSettleApplyParam(AssetSettleForm assetSettleForm) throws TrustSDKException, Exception {

		String mchId = isTest?BaseParam.mchId:ConfigUtils.getMchId();
		String prvKey = isTest?BaseParam.create_user_privateKey:ConfigUtils.getCreateUserPrivateKey();
	
		String nodeId =isTest?BaseParam.nodeId:ConfigUtils.getNodeId();
		String chainId = isTest?BaseParam.chainId:ConfigUtils.getChainId();
		String ledgerId = isTest?BaseParam.leadgerId:ConfigUtils.getLedgerId();
		Map<String, Object> paramMap = new TreeMap<String, Object>();
		paramMap.put("version", "1.0");
		paramMap.put("sign_type", "ECDSA");
		paramMap.put("mch_id", mchId);

		paramMap.put("node_id", nodeId);

		paramMap.put("chain_id", chainId);
		paramMap.put("ledger_id", ledgerId);

		paramMap.put("owner_account", assetSettleForm.getOwnerAccount());
		paramMap.put("asset_type", 1);
		paramMap.put("amount", assetSettleForm.getAmount());
		String assetList = assetSettleForm.getSrcAsset();
		
		//TODO 区块链工作人员称暂时不支持多个客户提交
		
		paramMap.put("src_asset_list", assetList);
		
		JSONObject jsonObj = new JSONObject();
		jsonObj.put("申请的信息", "金额为：" + assetSettleForm.getAmount());
		paramMap.put("extra_info", jsonObj);

		paramMap.put("timestamp", System.currentTimeMillis() / 1000);
		paramMap.put("mch_sign", TrustSDK.signString(prvKey, SignStrUtil.mapToKeyValueStr(paramMap).getBytes("UTF-8"), false));
		// generate post data
		JSONObject postJson = new JSONObject();
		for (String key : paramMap.keySet()) {
			postJson.put(key, paramMap.get(key));
		}
		return postJson.toJSONString();
	}

	




	public String generateTransferSubmitParam(AssetTransferSubmitForm assetSubmitForm) throws Exception {
		
		String mchId = isTest?BaseParam.mchId:ConfigUtils.getMchId();
		String prvKey = isTest?BaseParam.create_user_privateKey:ConfigUtils.getCreateUserPrivateKey();
	
		String nodeId =isTest?BaseParam.nodeId:ConfigUtils.getNodeId();
		String chainId = isTest?BaseParam.chainId:ConfigUtils.getChainId();
		String ledgerId = isTest?BaseParam.leadgerId:ConfigUtils.getLedgerId();
		Map<String, Object> paramMap = new TreeMap<String, Object>();
		paramMap.put("version", "1.0");
		paramMap.put("sign_type", "ECDSA");
		paramMap.put("mch_id", mchId);

		paramMap.put("node_id", nodeId);

		paramMap.put("chain_id", chainId);
		paramMap.put("ledger_id", ledgerId);

		paramMap.put("transaction_id",assetSubmitForm.getTransactionId());
		paramMap.put("asset_type", 1);

		JSONArray signList = JSONArray.parseArray(assetSubmitForm.getSignList());
		for (int i = 0; i < signList.size(); i++) {
			JSONObject jsonObject = signList.getJSONObject(i);
			String sign = TrustSDK.SignRenString(assetSubmitForm.getUserPrivateKey(), Hex.decodeHex(jsonObject.getString("sign_str").toCharArray()));
			jsonObject.put("sign", sign);

		}
		paramMap.put("sign_list", signList);
		paramMap.put("timestamp", System.currentTimeMillis() / 1000);
		paramMap.put("mch_sign", TrustSDK.signString(prvKey, SignStrUtil.mapToKeyValueStr(paramMap).getBytes("UTF-8"), false));
		// generate post data
		JSONObject postJson = new JSONObject();
		for (String key : paramMap.keySet()) {
			postJson.put(key, paramMap.get(key));
		}
		return postJson.toJSONString();
	}




	public String generateSettleSubmitParam(AssetSettleSubmitForm assetSettleSubmitForm) throws Exception {

		String mchId = isTest?BaseParam.mchId:ConfigUtils.getMchId();
		String prvKey = isTest?BaseParam.create_user_privateKey:ConfigUtils.getCreateUserPrivateKey();
	
		String nodeId =isTest?BaseParam.nodeId:ConfigUtils.getNodeId();
		String chainId = isTest?BaseParam.chainId:ConfigUtils.getChainId();
		String ledgerId = isTest?BaseParam.leadgerId:ConfigUtils.getLedgerId();
		Map<String, Object> paramMap = new TreeMap<String, Object>();
		paramMap.put("version", "1.0");
		paramMap.put("sign_type", "ECDSA");
		paramMap.put("mch_id", mchId);

		paramMap.put("node_id", nodeId);

		paramMap.put("chain_id", chainId);
		paramMap.put("ledger_id", ledgerId);

		paramMap.put("asset_type", 1);
		JSONArray signList = JSONArray.parseArray(assetSettleSubmitForm.getSignList());
		
		for (int i = 0; i < signList.size(); i++) {
			JSONObject jsonObject = signList.getJSONObject(i);
			String sign = TrustSDK.SignRenString(assetSettleSubmitForm.getUserPrivateKey(), Hex.decodeHex(jsonObject.getString("sign_str").toCharArray()));
			jsonObject.put("sign", sign);
		}
		paramMap.put("sign_list", signList);
		paramMap.put("transaction_id", assetSettleSubmitForm.getTransactionId());
		paramMap.put("timestamp", System.currentTimeMillis() / 1000);
		paramMap.put("mch_sign", TrustSDK.signString(prvKey, SignStrUtil.mapToKeyValueStr(paramMap).getBytes("UTF-8"), false));
		// generate post data
		JSONObject postJson = new JSONObject();
		for (String key : paramMap.keySet()) {
			postJson.put(key, paramMap.get(key));
		}
		return postJson.toJSONString();
	}


}
