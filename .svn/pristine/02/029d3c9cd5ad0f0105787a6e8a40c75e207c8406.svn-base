package com.blockchain.service.impl;

import java.io.UnsupportedEncodingException;
import java.sql.Timestamp;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.blockchain.DTO.Asset;
import com.blockchain.DTO.TransInfo;
import com.blockchain.DTO.UserInfo;
import com.blockchain.DTO.UserKey;
import com.blockchain.VO.AccountQueryForm;
import com.blockchain.VO.AssetTransQueryForm;
import com.blockchain.VO.UserForm;
import com.blockchain.exception.ErrorMessage;
import com.blockchain.exception.ServiceException;
import com.blockchain.exception.StatusCode;
import com.blockchain.service.UserService;
import com.blockchain.util.ResultUtil;
import com.blockchain.util.UserUtil;
import com.tencent.trustsql.sdk.TrustSDK;
import com.tencent.trustsql.sdk.bean.PairKey;
import com.tencent.trustsql.sdk.exception.TrustSDKException;
import com.tencent.trustsql.sdk.util.HttpClientUtil;
import com.tencent.trustsql.sdk.util.SimpleHttpClient;


@Service
public class UserServiceImpl implements UserService {
	private static Logger logger = Logger.getLogger(UserServiceImpl.class);



	@Override
	public UserKey generatePairKey(UserKey userKeyModel) throws TrustSDKException, UnsupportedEncodingException {

		String privateKey = "";
		String publicKey = "";
		String afterTrustSql = "";
		PairKey pairKey = null;

		pairKey = TrustSDK.generatePairKey(true);
		privateKey = pairKey.getPrivateKey();
		publicKey = pairKey.getPublicKey();
		afterTrustSql = TrustSDK.signString(privateKey, "Tencent TrustSQL".getBytes("UTF-8"), false);

		userKeyModel.setPrivateKey(privateKey);
		userKeyModel.setPublicKey(publicKey);
		userKeyModel.setAfterTrustKey(afterTrustSql);

		return userKeyModel;
	}

	@Override
	public UserInfo add(UserForm userForm) throws ServiceException,UnsupportedEncodingException, TrustSDKException, Exception {
		//申请原始帐号
		UserInfo userInfo = new UserInfo();
		userInfo.setId(userForm.getId());
		userInfo.setName(userForm.getName());
		String userRegistRequestString = UserUtil.generateUserRequest(userInfo,userForm);
		SimpleHttpClient httpClient = new SimpleHttpClient();
		String userRegistResult = httpClient.post("https://baas.trustsql.qq.com/idm_v1.1/api/user_cert/register", userRegistRequestString);
		ResultUtil.checkResultIfSuccess("申请用户", userRegistResult);
		JSONObject userRegistRetData = JSON.parseObject(userRegistResult).getJSONObject("retdata");
	
		//注册原始帐号的账户
		String userBaseAccoutForm = UserUtil.generateuserAccoutForm(userInfo,userRegistRetData, false);
		String userBaseAccountRegistResult = httpClient.post("https://baas.trustsql.qq.com/idm_v1.1/api/account_cert/register", userBaseAccoutForm);
		logger.debug("注册原始帐号的账户返回结果:"+userBaseAccountRegistResult);
		ResultUtil.checkResultIfSuccess("申请账户",userBaseAccountRegistResult);
		JSONObject userAccoutData = JSON.parseObject(userRegistResult).getJSONObject("retdata");
		
		String userBaseAccount = userAccoutData.getString("user_address");
		if ( StringUtils.isBlank(userBaseAccount)){
			userBaseAccount = userAccoutData.getString("account_address");
		}
		userInfo.setBaseAccountAddress(userBaseAccount);
		
		//再设置一个新的账号作为代理账号
		 String userHostAccoutForm = UserUtil.generateuserAccoutForm(userInfo,userRegistRetData, true);
		String userHostAccountFormResult = httpClient.post("https://baas.trustsql.qq.com/idm_v1.1/api/account_cert/register", userHostAccoutForm);
		ResultUtil.checkResultIfSuccess("申请代理账户",userHostAccountFormResult);
		logger.debug("注册申请代理账户返回结果:"+userHostAccountFormResult);
		JSONObject userHostAccoutData = JSON.parseObject(userHostAccountFormResult).getJSONObject("retdata");
		String userHostAccount = userHostAccoutData.getString("user_address");
	
		if ( StringUtils.isBlank(userHostAccount)){
			userHostAccount = userHostAccoutData.getString("account_address");
		}
		userInfo.setHostWalletAccountAddress(userHostAccount);

		return userInfo;
	}
	@Override
	public List<Asset> accountQuery(AccountQueryForm assetForm) throws TrustSDKException, Exception {

		String accountQueryString = UserUtil.generateAccountQueryParam(assetForm);
		logger.debug("调用【资产查询前】" + accountQueryString);
		String url = "https://baas.trustsql.qq.com/cgi-bin/v1.0/dam_asset_account_query_v1.cgi";
		String accountQueryResult = HttpClientUtil.post(url, accountQueryString);
		logger.debug("调用【资产查询后】" + accountQueryResult);
		ResultUtil.checkResultIfSuccess("资产查询接口", accountQueryResult);

		JSONObject userRegistRetData = JSON.parseObject(accountQueryResult);
		JSONArray jsonArray = JSON.parseArray(userRegistRetData.getString("assets_list"));
		List<Asset> assetList = new LinkedList<Asset>();
		for (int i = 0; i < jsonArray.size(); i++) {
			JSONObject o = jsonArray.getJSONObject(i);
			Asset asset = new Asset();
			asset.setAmount(o.getInteger("amount"));
			asset.setAssetAccount(o.getString("asset_account"));
			asset.setAssetId(o.getString("asset_id"));
			asset.setAssetType(o.getInteger("asset_type"));
			asset.setState(o.getInteger("state"));
			asset.setContent(o.getJSONObject("content"));
			asset.setState(o.getInteger("state"));

			assetList.add(asset);
		}
		// 从大金额到小金额排序
		Collections.sort(assetList, new Comparator<Asset>() {
			public int compare(Asset one, Asset another) {

				return (int) -(one.getAmount() - another.getAmount());
			}
		});
		return assetList;
	}

	@Override
	public List<TransInfo> transQuery(AssetTransQueryForm assetForm) throws ServiceException, TrustSDKException, Exception {

		String accountQueryString = UserUtil.generateTransQueryParam(assetForm);
		logger.debug("调用【交易查询前】" + accountQueryString);
		String url = "https://baas.trustsql.qq.com/cgi-bin/v1.0/dam_asset_trans_query_v1.cgi";
		String accountQueryResult = HttpClientUtil.post(url, accountQueryString);
		ResultUtil.checkResultIfSuccess("交易查询接口", accountQueryResult);
		logger.debug("调用【交易查询后】" + accountQueryResult);
		JSONObject userRegistRetData = JSON.parseObject(accountQueryResult);

		JSONArray jsonArray = JSON.parseArray(userRegistRetData.getString("trans_list"));
		List<TransInfo> transInfoList = new LinkedList<TransInfo>();
		for (int i = 0; i < jsonArray.size(); i++) {
			JSONObject o = jsonArray.getJSONObject(i);
			TransInfo transInfo = new TransInfo();
			transInfo.setAmount(o.getInteger("amount"));
			transInfo.setDstAccount(o.getString("dst_account"));
			transInfo.setDstAssetId(o.getString("dst_asset_id"));
			transInfo.setSrcAccount(o.getString("src_account"));
			transInfo.setSrcAssetId(o.getString("src_asset_id"));
			transInfo.setTransactionId(o.getString("transaction_id"));
			transInfo.setTransState(o.getInteger("trans_state"));
			transInfo.setTransTime(o.getString("trans_time"));
			transInfo.setTransType(o.getInteger("trans_type"));
			transInfo.setSignStr(o.getString("sign_str_list"));
			transInfoList.add(transInfo);
		}
		Collections.sort(transInfoList, new Comparator<TransInfo>() {
			public int compare(TransInfo one, TransInfo another) {

				return (int) -(Timestamp.valueOf(one.getTransTime()).getTime() - Timestamp.valueOf(another.getTransTime()).getTime());
			}
		});
		return transInfoList;
	}
	
	@Override
	public String getSrcAssetListBySrcAccount(String srcAccount, String content) throws TrustSDKException, Exception {
		boolean first = true;
		AccountQueryForm accountQuery = new AccountQueryForm();
		accountQuery.setAssetAccount(srcAccount);
		accountQuery.setPageLimit(20);
		accountQuery.setPageNo(1);

		accountQuery.setState(0);

		JSONObject contentJson = JSON.parseObject(content);
		logger.debug("调用【accountQuery前】的参数信息" + JSON.toJSONString(accountQuery));
		List<Asset> list = accountQuery(accountQuery);
		StringBuffer assetIdList = new StringBuffer("");
		logger.debug("调用【accountQuery】成功后返回的" + JSON.toJSONString(list));
		for (Asset asset : list) {
			if (asset.getAssetType().equals(1) && asset.getContent().equals(contentJson)) {
				if (first) {
					assetIdList.append(asset.getAssetId());
					first = false;
				} else {
					assetIdList.append("," + asset.getAssetId());

				}
			}

		}
		if (StringUtils.isBlank(assetIdList)) {
			String s = new ErrorMessage(StatusCode.SERVICE_EXCEPTION, "资产查询", "该用户没有资产，可能都在待申请").toJsonString();
			throw new ServiceException(s);
		}
		return assetIdList.toString();
	}
}