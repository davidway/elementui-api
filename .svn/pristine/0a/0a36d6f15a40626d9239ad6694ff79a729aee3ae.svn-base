package com.blockchain.filter;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.web.method.HandlerMethod;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

public class SystemSessionInterceptor implements HandlerInterceptor {

	private static final Logger log = Logger.getLogger(SystemSessionInterceptor.class);

	/**
	 * preHandle方法是进行处理器拦截用的，顾名思义，该方法将在Controller处理之前进行调用，
	 * SpringMVC中的Interceptor拦截器是链式的，可以同时存在多个Interceptor，
	 * 然后SpringMVC会根据声明的前后顺序一个接一个的执行，
	 * 而且所有的Interceptor中的preHandle方法都会在Controller方法调用之前调用。
	 * SpringMVC的这种Interceptor链式结构也是可以进行中断的，
	 * 这种中断方式是令preHandle的返回值为false，当preHandle的返回值为false的时候整个请求就结束了。
	 */
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)

	throws Exception {
		// 所有请求第一个进入的方法
		String reqURL = request.getRequestURL().toString();
		String ip = request.getRemoteHost();
		String contentType = request.getContentType();

		InputStream is = request.getInputStream();
		StringBuilder responseStrBuilder = new StringBuilder();
		BufferedReader streamReader = new BufferedReader(new InputStreamReader(is, "UTF-8"));
		String inputStr;
		while ((inputStr = streamReader.readLine()) != null)
			responseStrBuilder.append(inputStr);
		// System.out.println("请求参数: " + responseStrBuilder.toString ());
		String parmeter = responseStrBuilder.toString();

	
		if (handler instanceof HandlerMethod) {
			StringBuilder sb = new StringBuilder(1000);
			sb.append("-----------------------").append(System.currentTimeMillis()).append("-------------------------------------\n");
			HandlerMethod h = (HandlerMethod) handler;
			// Controller 的包名
			sb.append("Controller: ").append(h.getBean().getClass().getName()).append("\n");
			// 方法名称
			sb.append("Method    : ").append(h.getMethod().getName()).append("\n");
			// 请求方式 post\put\get 等等
			sb.append("RequestMethod    : ").append(request.getMethod()).append("\n");
			// 所有的请求参数
			sb.append("Params    : ").append(parmeter).append("\n");
			// 部分请求链接
			sb.append("URI       : ").append(request.getRequestURI()).append("\n");
			// 完整的请求链接
			sb.append("AllURI    : ").append(reqURL).append("\n");
			// 请求方的 ip地址
			sb.append("request IP: ").append(ip).append("\n"); 
			
			sb.append("request content-type: ").append(contentType).append("\n"); 
			log.info(sb.toString());
		
		}
	

		return true;
	}

	/**
	 * 这个方法只会在当前这个Interceptor的preHandle方法返回值为true的时候才会执行。
	 * postHandle是进行处理器拦截用的，它的执行时间是在处理器进行处理之 后， 也就是在Controller的方法调用之后执行，
	 * 但是它会在DispatcherServlet进行视图的渲染之前执行，也就是说在这个方法中你可以对ModelAndView进行操作。
	 * 这个方法的链式结构跟正常访问的方向是相反的，也就是说先声明的Interceptor拦截器该方法反而会后调用，
	 * 这跟Struts2里面的拦截器的执行过程有点像，
	 * 只是Struts2里面的intercept方法中要手动的调用ActionInvocation的invoke方法，
	 * Struts2中调用ActionInvocation的invoke方法就是调用下一个Interceptor或者是调用action，
	 * 然后要在Interceptor之前调用的内容都写在调用invoke之前，要在Interceptor之后调用的内容都写在调用invoke方法之后。
	 */
	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {

	}

	/**
	 * 该方法也是需要当前对应的Interceptor的preHandle方法的返回值为true时才会执行。
	 * 该方法将在整个请求完成之后，也就是DispatcherServlet渲染了视图执行， 这个方法的主要作用是用于清理资源的，
	 */
	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
	}

}