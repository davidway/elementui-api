package com.blockchain.service.impl;

import java.io.UnsupportedEncodingException;




import java.sql.Timestamp;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import sun.util.logging.resources.logging;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.blockchain.DTO.Asset;
import com.blockchain.DTO.AssetIssue;
import com.blockchain.DTO.AssetSettle;
import com.blockchain.DTO.AssetTransfer;
import com.blockchain.DTO.TransInfo;
import com.blockchain.VO.AccountQueryForm;
import com.blockchain.VO.AssetForm;
import com.blockchain.VO.AssetSettleForm;
import com.blockchain.VO.AssetSettleSubmitForm;
import com.blockchain.VO.AssetSubmitForm;
import com.blockchain.VO.AssetTransQueryForm;
import com.blockchain.VO.AssetTransferForm;
import com.blockchain.VO.AssetTransferSubmitForm;
import com.blockchain.exception.ServiceException;
import com.blockchain.exception.ErrorMessage;
import com.blockchain.exception.StatusCode;
import com.blockchain.service.AssetService;
import com.blockchain.util.AssetPrepareUtil;
import com.blockchain.util.AssetUtil;
import com.blockchain.util.ResultUtil;
import com.tencent.trustsql.sdk.exception.TrustSDKException;
import com.tencent.trustsql.sdk.util.HttpClientUtil;


@Service
public class AssetServiceImpl implements AssetService {
	public static final Logger logger = Logger.getLogger(AssetServiceImpl.class);
	
	@Resource
	AssetUtil assetUtil;
	@Resource
	AssetPrepareUtil assetPrepareUtil;

	@Override
	public AssetIssue issue(AssetForm assetForm) throws Exception {
		logger.debug("issue调试");
		logger.debug("传入的参数"+assetForm);
		String applyString = assetUtil.generateIssueApplyParam(assetForm);
		
		logger.debug("调用【发行申请】前的参数:"+applyString);
		String applyUrl = "https://baas.trustsql.qq.com/cgi-bin/v1.0/dam_asset_issue_apply_v1.cgi";
		String applyResultString = HttpClientUtil.post(applyUrl, applyString);
		logger.debug("调用【发行申请】后的参数"+applyResultString);
		ResultUtil.checkResultIfSuccess("资产申请接口", applyResultString);
		
		
		AssetSubmitForm assetSubmitForm = assetPrepareUtil.prepareAssetSubmitForm(applyResultString);
		String submitString = assetUtil.generateIssueSubmitParam(assetSubmitForm);
		
		logger.debug("调用【发行提交】后的参数"+submitString);
		String submitUrl = "https://baas.trustsql.qq.com/cgi-bin/v1.0/dam_asset_issue_submit_v1.cgi";
		String submitResultString = HttpClientUtil.post(submitUrl, submitString);
		
		
		ResultUtil.checkResultIfSuccessSubmit("资产提交接口",JSON.toJSONString(assetSubmitForm) ,submitResultString);
		logger.debug("issue调试结束");

		String transactionId = assetSubmitForm.getTransactionId();
		String assetId = JSON.parseObject(submitResultString).getString("asset_id");
		AssetIssue assetIssue = new AssetIssue();
		assetIssue.setTransactionId(transactionId);
		assetIssue.setAssetId(assetId);

		return assetIssue;
	}

	@Override
	public AssetTransfer transfer(AssetTransferForm assetTransferForm) throws TrustSDKException, Exception {
		
		logger.debug("transfer调试开始");
		String applyString = assetUtil.generateTransferApplyParam(assetTransferForm);
		logger.debug("调用【转账申请前】的参数"+applyString);
		String applyUrl = "https://baas.trustsql.qq.com/cgi-bin/v1.0/dam_asset_transfer_apply_v1.cgi";
		String applyResultString = HttpClientUtil.post(applyUrl, applyString);
		logger.debug("调用【转账申请后】的参数"+applyString);
		
		ResultUtil.checkResultIfSuccess("资产转让申请接口", applyResultString);

		AssetTransferSubmitForm asseTransfertSubmitForm = assetPrepareUtil.perpareTransferSubmitForm(assetTransferForm, applyResultString);
		String submitString = assetUtil.generateTransferSubmitParam(asseTransfertSubmitForm);
		logger.debug("调用【转账提交前】的参数"+submitString);
		String submitUrl = "https://baas.trustsql.qq.com/cgi-bin/v1.0/dam_asset_transfer_submit_v1.cgi";
		String submitResultString = HttpClientUtil.post(submitUrl, submitString);
		logger.debug("调用【转账提交后】的参数"+submitResultString);
		
		ResultUtil.checkResultIfSuccessSubmit("资产转让提交接口", JSONObject.toJSONString(asseTransfertSubmitForm),submitResultString);
		
		
		
		logger.debug("issue调试结束");

		AssetTransfer assetTransfer = new AssetTransfer();
		JSONObject json = JSONObject.parseObject(submitResultString);
		String dstAssetId = json.getString("dst_asset_id");
		String srcAssetId = json.getString("src_asset_id");
		String transactionId = asseTransfertSubmitForm.getTransactionId();
		assetTransfer.setDstAssetId(dstAssetId);
		assetTransfer.setSrcAssetId(srcAssetId);
		assetTransfer.setTransactionId(transactionId);
		return assetTransfer;
	}

	@Override
	public AssetSettle settle(AssetSettleForm assetSettleForm) throws UnsupportedEncodingException, TrustSDKException, Exception {
		logger.debug("settle调试开始");
		String applyString = assetUtil.generateSettleApplyParam(assetSettleForm);
		
		logger.debug("调用【兑换申请前】"+applyString);
		String applyUrl = "https://baas.trustsql.qq.com/cgi-bin/v1.0/dam_asset_settle_apply_v1.cgi";
		String applyResultString = HttpClientUtil.post(applyUrl, applyString);
		logger.debug("调用【兑换申请后】"+applyResultString);
		
		ResultUtil.checkResultIfSuccess("资产兑换申请接口", applyResultString);

		AssetSettleSubmitForm assetSettleSubmitForm = assetPrepareUtil.perpareTransferSubmitForm(assetSettleForm, applyResultString);
		String submitString = assetUtil.generateSettleSubmitParam(assetSettleSubmitForm);

		logger.debug("【兑换【调用提交前】"+submitString);
		String submitUrl = "https://baas.trustsql.qq.com/cgi-bin/v1.0/dam_asset_settle_submit_v1.cgi";
		String submitResultString = HttpClientUtil.post(submitUrl, submitString);
		logger.debug("【兑换【调用提交】后"+submitResultString);
		
		ResultUtil.checkResultIfSuccessSubmit("资产提交接口", JSON.toJSONString(assetSettleSubmitForm),submitResultString);
		logger.debug("settle调试结束");

		AssetSettle assetSettle = new AssetSettle();
		String transactionId = assetSettleSubmitForm.getTransactionId();
		JSONObject json = JSONObject.parseObject(submitResultString);
		String leftAssetId = json.getString("left_asset_id");
		assetSettle.setSrcAssetId(leftAssetId);
		assetSettle.setTransactionId(transactionId);
		return assetSettle;
	}

	@Override
	public List<Asset> accountQuery(AccountQueryForm assetForm) throws TrustSDKException, Exception {
		
		String accountQueryString = assetUtil.generateAccountQueryParam(assetForm);
		logger.debug("调用【资产查询前】"+accountQueryString);
		String url = "https://baas.trustsql.qq.com/cgi-bin/v1.0/dam_asset_account_query_v1.cgi";
		String accountQueryResult = HttpClientUtil.post(url, accountQueryString);
		logger.debug("调用【资产查询后】"+accountQueryResult);
		ResultUtil.checkResultIfSuccess("资产查询接口", accountQueryResult);

		JSONObject userRegistRetData = JSON.parseObject(accountQueryResult);
		JSONArray jsonArray = JSON.parseArray(userRegistRetData.getString("assets_list"));
		List<Asset> assetList = new LinkedList<Asset>();
		for (int i = 0; i < jsonArray.size(); i++) {
			JSONObject o = jsonArray.getJSONObject(i);
			Asset asset = new Asset();
			asset.setAmount(o.getInteger("amount"));
			asset.setAssetAccount(o.getString("asset_account"));
			asset.setAssetId(o.getString("asset_id"));
			asset.setAssetType(o.getInteger("asset_type"));
			asset.setState(o.getInteger("state"));
			asset.setContent(o.getJSONObject("content"));
			asset.setState(o.getInteger("state"));
			
			assetList.add(asset);
		}
		// 从大金额到小金额排序
		Collections.sort(assetList, new Comparator<Asset>() {
			public int compare(Asset one, Asset another) {

				return -(one.getAmount() - another.getAmount());
			}
		});
		return assetList;
	}

	@Override
	public List<TransInfo> transQuery(AssetTransQueryForm assetForm) throws ServiceException, TrustSDKException, Exception {

		String accountQueryString = assetUtil.generateTransQueryParam(assetForm);
		logger.debug("调用【交易查询前】"+accountQueryString);
		String url = "https://baas.trustsql.qq.com/cgi-bin/v1.0/dam_asset_trans_query_v1.cgi";
		String accountQueryResult = HttpClientUtil.post(url, accountQueryString);
		ResultUtil.checkResultIfSuccess("交易查询接口", accountQueryResult);
		logger.debug("调用【交易查询后】"+accountQueryResult);
		JSONObject userRegistRetData = JSON.parseObject(accountQueryResult);
		
		JSONArray jsonArray = JSON.parseArray(userRegistRetData.getString("trans_list"));
		List<TransInfo> transInfoList = new LinkedList<TransInfo>();
		for (int i = 0; i < jsonArray.size(); i++) {
			JSONObject o = jsonArray.getJSONObject(i);
			TransInfo transInfo = new TransInfo();
			transInfo.setAmount(o.getInteger("amount"));
			transInfo.setDstAccount(o.getString("dst_account"));
			transInfo.setDstAssetId(o.getString("dst_asset_id"));
			transInfo.setSrcAccount(o.getString("src_account"));
			transInfo.setSrcAssetId(o.getString("src_asset_id"));
			transInfo.setTransactionId(o.getString("transaction_id"));
			transInfo.setTransState(o.getInteger("trans_state"));
			transInfo.setTransTime(o.getString("trans_time"));
			transInfo.setTransType(o.getInteger("trans_type"));
			transInfo.setSignStr(o.getString("sign_str_list"));
			transInfoList.add(transInfo);
		}
		Collections.sort(transInfoList, new Comparator<TransInfo>() {
			public int compare(TransInfo one, TransInfo another) {

				return (int) -(Timestamp.valueOf(one.getTransTime()).getTime() - Timestamp.valueOf(another.getTransTime()).getTime() );
			}
		});
		return transInfoList;
	}

	@Override
	public String getSrcAssetListBySrcAccount(String srcAccount,String content) throws TrustSDKException, Exception {
		boolean first = true;
		AccountQueryForm accountQuery = new AccountQueryForm();
		accountQuery.setAssetAccount(srcAccount);
		accountQuery.setPageLimit(20);
		accountQuery.setPageNo(1);
		
		accountQuery.setState(0);
		
		JSONObject contentJson = JSON.parseObject(content);
		logger.debug("调用【accountQuery前】的参数信息"+JSON.toJSONString(accountQuery));
		List<Asset> list = accountQuery(accountQuery);
		StringBuffer assetIdList = new StringBuffer("");
		logger.debug("调用【accountQuery】成功后返回的"+JSON.toJSONString(list));
		for (Asset asset : list) {
			if (asset.getAssetType().equals(1)&&asset.getContent().equals(contentJson) ) {
				if (first) {
					assetIdList.append(asset.getAssetId());
					first = false;
				} else {
					assetIdList.append("," + asset.getAssetId());

				}
			}

		}
		if (StringUtils.isBlank(assetIdList)) {
			String s = new ErrorMessage(StatusCode.SERVICE_EXCEPTION, "资产查询", "该用户没有资产，可能都在待申请").toJsonString();
			throw new ServiceException(s);
		}
		return assetIdList.toString();
	}

	@Override
	public AssetIssue issueSubmit(AssetSubmitForm assetForm) throws UnsupportedEncodingException, TrustSDKException, Exception {
		logger.debug("传入的参数"+assetForm);
		String submitString = assetUtil.generateIssueSubmitParam(assetForm);
		logger.debug("调用【资产发行前】"+submitString);

		String submitUrl = "https://baas.trustsql.qq.com/cgi-bin/v1.0/dam_asset_issue_submit_v1.cgi";
		String submitResultString = HttpClientUtil.post(submitUrl, submitString);
		ResultUtil.checkResultIfSuccess("资产提交接口", submitResultString);
		logger.debug("调用【资产只发行后】"+submitResultString);
		logger.debug("issue调试结束");

		String transactionId = assetForm.getTransactionId();

		String assetId = JSON.parseObject(submitResultString).getString("asset_id");
		AssetIssue assetIssue = new AssetIssue();
		assetIssue.setTransactionId(transactionId);
		assetIssue.setAssetId(assetId);

		return assetIssue;
	}

	@Override
	public AssetTransfer transSubmit(AssetTransferSubmitForm asseTransfertSubmitForm) throws TrustSDKException, Exception {

		AssetTransferForm assetTransferForm = new AssetTransferForm();
		assetTransferForm.setUserPrivateKey(asseTransfertSubmitForm.getUserPrivateKey());
		String submitString = assetUtil.generateTransferSubmitParam(asseTransfertSubmitForm);
		
		logger.debug("调用【转账只提交前】"+submitString);
		String submitUrl = "https://baas.trustsql.qq.com/cgi-bin/v1.0/dam_asset_transfer_submit_v1.cgi";
		String submitResultString = HttpClientUtil.post(submitUrl, submitString);
		logger.debug("调用【转账只提交后】"+submitResultString);
		
		ResultUtil.checkResultIfSuccess("资产转让提交接口", submitString);
		System.out.println(submitResultString);
		logger.debug("issue调试结束");

		AssetTransfer assetTransfer = new AssetTransfer();
		JSONObject json = JSONObject.parseObject(submitResultString);
		String dstAssetId = json.getString("dst_asset_id");
		String srcAssetId = json.getString("src_asset_id");
		String transactionId = asseTransfertSubmitForm.getTransactionId();
		assetTransfer.setDstAssetId(dstAssetId);
		assetTransfer.setSrcAssetId(srcAssetId);
		assetTransfer.setTransactionId(transactionId);
		return assetTransfer;
	}

	@Override
	public AssetSettle settleSubmit(AssetSettleSubmitForm assetSettleSubmitForm) throws Exception {

		String submitString = assetUtil.generateSettleSubmitParam(assetSettleSubmitForm);
		logger.debug("调用【兑换只提交前】"+submitString);
		String submitUrl = "https://baas.trustsql.qq.com/cgi-bin/v1.0/dam_asset_settle_submit_v1.cgi";
		
		String submitResultString = HttpClientUtil.post(submitUrl, submitString);
		logger.debug("调用【兑换只提交后】"+submitResultString);
		ResultUtil.checkResultIfSuccess("资产提交接口", submitResultString);
	
		logger.debug("settle调试结束");

		AssetSettle assetSettle = new AssetSettle();
		String transactionId = assetSettleSubmitForm.getTransactionId();
		JSONObject json = JSONObject.parseObject(submitResultString);
		String leftAssetId = json.getString("left_asset_id");
		assetSettle.setSrcAssetId(leftAssetId);
		assetSettle.setTransactionId(transactionId);
		return assetSettle;
	}

	

}
