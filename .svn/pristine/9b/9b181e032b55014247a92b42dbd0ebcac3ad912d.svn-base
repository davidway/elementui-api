package com.blockchain.controller;

import java.io.UnsupportedEncodingException;

import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.http.MediaType;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.JSONObject;
import com.blockchain.DTO.Asset;
import com.blockchain.DTO.TransInfo;
import com.blockchain.DTO.UserInfo;
import com.blockchain.DTO.UserKey;
import com.blockchain.VO.AccountQueryForm;
import com.blockchain.VO.AssetForm;
import com.blockchain.VO.AssetTransQueryForm;
import com.blockchain.VO.PhpSystemJsonContent;
import com.blockchain.VO.UserForm;
import com.blockchain.exception.ServiceException;
import com.blockchain.exception.ErrorMessage;
import com.blockchain.exception.ParameterErrorException;
import com.blockchain.exception.StatusCode;
import com.blockchain.service.AssetService;
import com.blockchain.service.UserService;
import com.blockchain.util.ConfigUtils;
import com.blockchain.util.ResponseUtil;
import com.blockchain.util.ValidatorUtil;
import com.tencent.trustsql.sdk.TrustSDK;
import com.tencent.trustsql.sdk.exception.TrustSDKException;

import com.wordnik.swagger.annotations.ApiImplicitParam;
import com.wordnik.swagger.annotations.ApiImplicitParams;
import com.wordnik.swagger.annotations.ApiModel;
import com.wordnik.swagger.annotations.ApiModelProperty;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

@Controller
@RequestMapping(value = "/user")
public class UserController {
	private static Logger logger = Logger.getLogger(UserController.class);
	@Resource
	HttpServletResponse response;
	
	@Resource
	UserService userService;


	@ExceptionHandler(HttpMessageNotReadableException.class)  
	@ResponseBody  
	public PhpSystemJsonContent handleHttpMessageNotReadableException(  
	        HttpMessageNotReadableException ex) {  
		PhpSystemJsonContent response = new PhpSystemJsonContent();  
		response.setData("");
		response.setRetcode(StatusCode.PARAM_ERROR);
		response.setRetmsg("json格式错误，请检查是否为合法json");
	    return response;  
	}  
	
	@ResponseBody
	@RequestMapping(value = { "/generatePariKey" }, method = RequestMethod.POST)
	@ApiOperation(value = "生成用户公私钥", httpMethod = "POST", response = UserKey.class, consumes = "application/json",produces=MediaType.APPLICATION_JSON_VALUE)

	public void generatePariKey() {
		PhpSystemJsonContent phpSystemJsonContent = new PhpSystemJsonContent();
		String jsonString = "";

		UserKey userKeyModel = new UserKey();
		try {
			userKeyModel = userService.generatePairKey(userKeyModel);
		} catch (Exception e) {
			logger.error(e);
			phpSystemJsonContent = phpSystemJsonContent.setSDKError();
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}

		phpSystemJsonContent.setData(userKeyModel);

		try {
			jsonString = JSON.toJSONString(phpSystemJsonContent);
		} catch (JSONException e) {
			phpSystemJsonContent = phpSystemJsonContent.setParseJsonError();
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}
		ResponseUtil.echo(response, jsonString);
		return;
	}

	@ResponseBody
	@RequestMapping(value = { "/add" }, method = RequestMethod.POST,consumes="application/json")
	@ApiOperation(value = "创建用户", httpMethod = "POST", response = UserInfo.class, consumes = "application/json",produces=MediaType.APPLICATION_JSON_VALUE)
	
	public void add(@Valid @RequestBody UserForm userForm,BindingResult bindingResult) {
		PhpSystemJsonContent phpSystemJsonContent = new PhpSystemJsonContent();
		String jsonString = "";
		try {
			//ConfigUtils.check();
			
			ValidatorUtil.validate(bindingResult);
		} catch (ParameterErrorException e) {
			
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} /*catch (BodyException e) {
			logger.error(e);
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}*/
		
		try {
			UserInfo userInfo = userService.add(userForm);
			phpSystemJsonContent.setData(userInfo);
		} catch (ServiceException e) {
			phpSystemJsonContent.setRetmsg(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} catch (Exception e) {
			logger.error(e);
			phpSystemJsonContent = phpSystemJsonContent.setSDKError();
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}

		try {
			jsonString = JSON.toJSONString(phpSystemJsonContent,true);
		} catch (JSONException e) {
			logger.error(e);
			phpSystemJsonContent = phpSystemJsonContent.setParseJsonError();
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}
		ResponseUtil.echo(response, jsonString);
		return;
	}
	@ResponseBody
	@RequestMapping(value = { "/accountQuery" }, method = RequestMethod.POST)
	@ApiOperation(value = "资产批量查询", httpMethod = "POST", response = Asset.class, consumes = "application/json",produces=MediaType.APPLICATION_JSON_VALUE)

	public void accountQuery(@Valid @RequestBody AccountQueryForm assetForm, BindingResult bindingResult) {
		PhpSystemJsonContent phpSystemJsonContent = new PhpSystemJsonContent();
		String jsonString = "";
		try {
			ConfigUtils.check();
			ValidatorUtil.validate(bindingResult);
		} catch (ParameterErrorException e1) {
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e1.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} catch (ServiceException e) {
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}

		try {
			List<Asset> assetList = userService.accountQuery(assetForm);
			phpSystemJsonContent.setData(assetList);
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);

		} catch (ServiceException e) {
			logger.error(e);
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} catch (Exception e) {
			logger.error(e);
			phpSystemJsonContent.setRetmsg(e.getMessage());
			phpSystemJsonContent.setRetcode(StatusCode.SYSTEM_UNKOWN_ERROR);
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}
		return;
	}

	@ResponseBody
	@RequestMapping(value = { "/transQuery" }, method = RequestMethod.POST)
	@ApiOperation(value = "交易批量查询", httpMethod = "POST", response = TransInfo.class, consumes = "application/json",produces=MediaType.APPLICATION_JSON_VALUE)
	public void transQuery(@Valid  @RequestBody AssetTransQueryForm assetForm, BindingResult bindingResult) {
		PhpSystemJsonContent phpSystemJsonContent = new PhpSystemJsonContent();
		String jsonString = "";
		try {
			ConfigUtils.check();
			ValidatorUtil.validate(bindingResult);
		} catch (ParameterErrorException e1) {
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e1.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} catch (ServiceException e) {
			logger.error(e);
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}

		try {
			List<TransInfo> assetList = userService.transQuery(assetForm);
			phpSystemJsonContent.setData(assetList);
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);

		} catch (ServiceException e) {
			logger.error(e);
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} catch (Exception e) {
			logger.error(e);
			phpSystemJsonContent.setRetmsg(e.getMessage());
			phpSystemJsonContent.setRetcode(StatusCode.SYSTEM_UNKOWN_ERROR);
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}
		return;
	}
	@ResponseBody
	@RequestMapping(value = { "/getUserInfo" }, method = RequestMethod.POST)
	@ApiOperation(value = "查询用户信息", httpMethod = "POST", response = TransInfo.class, consumes = "application/json",produces=MediaType.APPLICATION_JSON_VALUE)
	public void getUserInfo(@RequestParam("privateKey") @ApiParam(value="用户私钥",defaultValue="{\"privateKey\":\"\"}") String privateKey){
		PhpSystemJsonContent phpSystemJsonContent = new PhpSystemJsonContent(); 
		
		if (StringUtils.isBlank(privateKey)){
			phpSystemJsonContent = phpSystemJsonContent.setParameterError("用户私钥不能为空");
			String jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}
		
	
		UserInfo userInfo = new UserInfo();
		try {
			String baseAccoutAddress = TrustSDK.generateAddrByPrvkey(privateKey);
			String publicKey = TrustSDK.generatePubkeyByPrvkey(privateKey, true);
			userInfo.setBaseAccountAddress(baseAccoutAddress);
			userInfo.setBasePrivateKey(privateKey);
			userInfo.setBasePublicKey(publicKey);
			phpSystemJsonContent.setData(userInfo);
			
			String jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} catch (TrustSDKException e) {
			logger.error(e);
			phpSystemJsonContent.setRetmsg(e.getMessage());
			phpSystemJsonContent.setRetcode(StatusCode.SYSTEM_UNKOWN_ERROR);
			String jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}
		
		
		
		
	}
	
}