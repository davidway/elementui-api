	package com.blockchain.util;

import java.io.FileInputStream;

import java.io.IOException;

import java.io.InputStream;
import java.util.Properties;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

import com.blockchain.exception.BodyException;
import com.blockchain.exception.ErrorMessage;
import com.blockchain.exception.StatusCode;
import com.tencent.trustsql.sdk.TrustSDK;
import com.tencent.trustsql.sdk.exception.TrustSDKException;

/**
 * 读取配置文件 config/config.properties
 * 
 * @author zhaojing
 * 
 */
public class ConfigUtils {
	static Logger logger = Logger.getLogger(ConfigUtils.class);
	static Properties prop = new Properties();
	
	
	private static String createUserPrivateKey;
	private static String createUserPublicKey;
	private static String chainId;
	private static String nodeId;
	private static String ledgerId;
	private static String mchId;
	private static String coin_privateKey;
	{
		try {
			String path = ConfigUtils.class.getClassLoader().getResource("config.properties").getPath();  
			InputStream in = new FileInputStream(path);  
			prop.load(in);

			createUserPrivateKey = getProperty(prop, "createUserPrivateKey");
			createUserPublicKey = getProperty(prop, "createUserPublicKey");
			chainId = getProperty(prop, "chainId");
			nodeId = getProperty(prop, "nodeId");
			ledgerId = getProperty(prop, "ledgerId");
			mchId = getProperty(prop, "mchId");
			coin_privateKey = Base64.encodeBase64String(DigestUtils.sha256(ledgerId));
		}

		catch (IOException e) {
			logger.error(e);
		}
	}

	private static String getProperty(Properties prop, String key) {
		String value = prop.getProperty(key);
		if (value != null) {
			return value = value.trim();
		}
		return value;
	}

	/** Prevent instantiation */
	private ConfigUtils() {
	}

	public static String getCreateUserPrivateKey() {
		return createUserPrivateKey;
	}

	public static void setCreateUserPrivateKey(String createUserPrivateKey) {

		ConfigUtils.createUserPrivateKey = createUserPrivateKey;
		prop.setProperty("createUserPrivateKey", createUserPrivateKey);

	}

	public static String getCreateUserPublicKey() {
		return createUserPublicKey;
	}

	public static void setCreateUserPublicKey(String createUserPublicKey) {
		ConfigUtils.createUserPublicKey = createUserPublicKey;
		prop.setProperty("createUserPrivateKey", createUserPrivateKey);
	}

	public static String getChainId() {
		return chainId;
	}

	public static void setChainId(String chainId) {
		ConfigUtils.chainId = chainId;
		prop.setProperty("chainId", chainId);
	}

	public static String getNodeId() {
		return nodeId;
	}

	public static void setNodeId(String nodeId) {

		ConfigUtils.nodeId = nodeId;
		prop.setProperty("nodeId", nodeId);
	}

	public static String getLedgerId() {
		return ledgerId;
	}

	public static void setLedgerId(String ledgerId) {
		ConfigUtils.ledgerId = ledgerId;
		prop.setProperty("ledgerId", ledgerId);
		coin_privateKey = Base64.encodeBase64String(DigestUtils.sha256(ledgerId));
		prop.setProperty("coin_privateKey", coin_privateKey);
	}

	public static String getMchId() {
		return mchId;
	}

	public static void setMchId(String mchId) {

		ConfigUtils.mchId = mchId;
		prop.setProperty("mchId", mchId);
	}

	public static String getCoin_privateKey() {
		return coin_privateKey;
	}
	public static void check() throws BodyException{
		StringBuffer lessName=new StringBuffer("");
		String chainId = ConfigUtils.getChainId();
		String coin_privateKey = ConfigUtils.getCoin_privateKey();
		String createUserPrivateKey = ConfigUtils.getCreateUserPrivateKey();
		String createUserPublicKey = ConfigUtils.getCreateUserPublicKey();
		String ledgerId = ConfigUtils.getLedgerId();
		String mchId = ConfigUtils.getMchId();
		String nodeId = ConfigUtils.getNodeId();
		try {
			TrustSDK.checkPairKey(createUserPrivateKey, createUserPublicKey);
		} catch (TrustSDKException e) {
			String  string= new ErrorMessage(StatusCode.SERVICE_EXCEPTION,"配置文件配置中","发行方公私钥不匹配").toJsonString();
			throw new BodyException(string);
		}
		if ( StringUtils.isBlank(chainId)){
			lessName.append("配置文件中的联盟链id不能为空，");
		}if ( StringUtils.isBlank(coin_privateKey)){
			lessName.append("配置文件中的账本id尚未被解析，");
		}if ( StringUtils.isBlank(createUserPrivateKey)){
			lessName.append("配置文件中的用户私钥不能为空，");
		}if ( StringUtils.isBlank(createUserPublicKey)){
			lessName.append("配置文件中的用户公钥不能为空，");
		}if ( StringUtils.isBlank(ledgerId)){
			lessName.append("配置文件中的账本id不能为空，");
		}if ( StringUtils.isBlank(mchId)){
			lessName.append("配置文件中的机构id不能为空，");
		}if ( StringUtils.isBlank(nodeId)){
			lessName.append("配置文件中的节点id不能为空，");
		}
		if (StringUtils.isNotBlank(lessName.toString())){
			String  string= new ErrorMessage(StatusCode.SERVICE_EXCEPTION,"配置文件配置异常",lessName.toString()).toJsonString();
			throw new BodyException(string);
		}
	}


}
