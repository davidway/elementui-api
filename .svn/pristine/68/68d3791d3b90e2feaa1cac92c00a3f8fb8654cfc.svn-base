package com.blockchain.aop;

import java.util.Enumeration;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;



@Component
@Aspect
public class GlobalAspect {


	private static final Logger log = Logger.getLogger(GlobalAspect.class);

	@Pointcut("execution(* com.blockchain.*.*.*(..))")
	private void pointCutMethod() {

	}

	// 声明前置通知
	/*
	 * @Before("pointCutMethod()") public void doBefore() {
	 * System.out.println("前置通知"); }
	 */

	// 声明后置通知
	/*
	 * @AfterReturning(pointcut = "pointCutMethod()", returning = "result")
	 * public void doAfterReturning(String result) { System.out.println("后置通知");
	 * System.out.println("---" + result + "---"); }
	 */

	// 声明例外通知
	@AfterThrowing(pointcut = "pointCutMethod()", throwing = "e")
	public void doAfterThrowing(JoinPoint joinPoint, Throwable e) {
		log.error("未捕捉到的异常", e);
	}


	

	
	// 声明最终通知
	/*
	 * @After("pointCutMethod()") public void doAfter() {
	 * System.out.println("最终通知"); }
	 */

	// 声明环绕通知
	/*
	 * @Around("pointCutMethod()") public Object doAround(ProceedingJoinPoint
	 * pjp) throws Throwable { System.out.println("进入方法---环绕通知"); Object o =
	 * pjp.proceed(); System.out.println("退出方法---环绕通知"); return o; }
	 */
}