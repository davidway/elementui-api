package com.blockchain.controller;

import javax.annotation.Resource;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.blockchain.DTO.AssetIssue;
import com.blockchain.DTO.AssetSettle;
import com.blockchain.DTO.AssetTransfer;
import com.blockchain.VO.AssetForm;
import com.blockchain.VO.AssetSettleForm;
import com.blockchain.VO.AssetSettleSubmitForm;
import com.blockchain.VO.AssetSubmitForm;
import com.blockchain.VO.AssetTransferForm;
import com.blockchain.VO.AssetTransferSubmitForm;
import com.blockchain.VO.PhpSystemJsonContent;
import com.blockchain.exception.ErrorMessage;
import com.blockchain.exception.ParameterErrorException;
import com.blockchain.exception.ServiceException;
import com.blockchain.exception.StatusCode;
import com.blockchain.exception.SubmitException;
import com.blockchain.exception.ThreadException;
import com.blockchain.service.AssetService;
import com.blockchain.util.ConfigUtils;
import com.blockchain.util.ResponseUtil;
import com.blockchain.util.TrustSDKUtil;
import com.blockchain.util.ValidatorUtil;
import com.tencent.trustsql.sdk.exception.TrustSDKException;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiResponses;

import com.wordnik.swagger.annotations.ApiResponse;

@Controller
@RequestMapping(value = "/asset")

public class AssetController {
	    Logger logger  =  LoggerFactory.getLogger(AssetController.class);
	@Resource
	HttpServletResponse response;
	@Resource
	AssetService assetService;

	
	
	@ResponseBody
	@RequestMapping(value = { "/transfer" }, method = RequestMethod.POST)
	@ApiOperation(value = "转账申请且提交", httpMethod = "POST", response = AssetTransfer.class, consumes = "application/json",produces=MediaType.APPLICATION_JSON_VALUE)
	@ApiResponses(value = { @ApiResponse(code = StatusCode.THREAD_ERROR, message = "并发异常",response=StatusCode.class),
			@ApiResponse(code = StatusCode.PARAM_ERROR, message = "前端：传参出错",response=StatusCode.class),
			@ApiResponse(code = StatusCode.STATUS_SUCCESS, message = "成功",response=StatusCode.class),
			@ApiResponse(code =  StatusCode.SERVICE_EXCEPTION, message = "后端：未知业务错误",response=StatusCode.class) ,
			@ApiResponse(code = StatusCode.SUBMIT_ERROR, message = "后端：业务提交错误",response=StatusCode.class) })
	public void transfer(@Valid @RequestBody AssetTransferForm assetTransferForm, BindingResult bindingResult) {
		PhpSystemJsonContent phpSystemJsonContent = new PhpSystemJsonContent();
		String jsonString = "";
		try {
			TrustSDKUtil.checkPrivateKeyAccountIsMatch(assetTransferForm.getUserPrivateKey(), assetTransferForm.getSrcAccount());
			ValidatorUtil.validate(bindingResult);
			ConfigUtils.check();
			// assetService.getSrcAssetListBySrcAccount(assetTransferForm.getSrcAccount(),assetTransferForm.getContent());
		} catch (ParameterErrorException e) {
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} catch (TrustSDKException e) {
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} catch (ServiceException e) {
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} catch (Exception e) {
			logger.error("未知错误",e);
			phpSystemJsonContent = phpSystemJsonContent.setUnkownError(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}

		try {

			AssetTransfer assetTransfer = assetService.transfer(assetTransferForm);
			phpSystemJsonContent.setData(assetTransfer);
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);

		} catch (SubmitException e) {
			phpSystemJsonContent.setData(e.getData());
			
			phpSystemJsonContent.setRetmsg(e.getMessage());
			phpSystemJsonContent.setRetcode(StatusCode.SUBMIT_ERROR);
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} catch (ServiceException e) {
			logger.error("业务错误",e);
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} catch (ThreadException e) {
			logger.error("并发异常",e);
			phpSystemJsonContent.setRetmsg(e.getMessage());
			phpSystemJsonContent.setRetcode(StatusCode.THREAD_ERROR);

			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}catch (Exception e) {
			logger.error("未知错误",e);
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}
		return;
	}

	@ResponseBody
	@RequestMapping(value = { "/settle" }, method = RequestMethod.POST)
	@ApiOperation(value = "资产兑付申请且提交", httpMethod = "POST", response = AssetSettle.class, consumes = "application/json",produces=MediaType.APPLICATION_JSON_VALUE)
	@ApiResponses(value = { @ApiResponse(code = StatusCode.THREAD_ERROR, message = "并发异常",response=StatusCode.class),
			@ApiResponse(code = StatusCode.PARAM_ERROR, message = "前端：传参出错",response=StatusCode.class),
			@ApiResponse(code = StatusCode.STATUS_SUCCESS, message = "成功",response=StatusCode.class),
			@ApiResponse(code =  StatusCode.SERVICE_EXCEPTION, message = "后端：未知业务错误",response=StatusCode.class) ,
			@ApiResponse(code = StatusCode.SUBMIT_ERROR, message = "后端：业务提交错误",response=StatusCode.class) })
	public void settle(@Valid @RequestBody AssetSettleForm assetSettleForm, BindingResult bindingResult) {
		PhpSystemJsonContent phpSystemJsonContent = new PhpSystemJsonContent();
		String jsonString = "";
		try {
			ConfigUtils.check();
			TrustSDKUtil.checkPrivateKeyAccountIsMatch(assetSettleForm.getUserPrivateKey(), assetSettleForm.getOwnerAccount());
			ValidatorUtil.validate(bindingResult);
			
		} catch (ParameterErrorException e1) {
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e1.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} catch (ServiceException e) {
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} catch (Exception e) {
			logger.error("未知错误",e);
			phpSystemJsonContent = phpSystemJsonContent.setUnkownError(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}

		try {
			AssetSettle assetSettle = assetService.settle(assetSettleForm);
			phpSystemJsonContent.setData(assetSettle);
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);

		} catch (SubmitException e) {
			phpSystemJsonContent.setData(e.getData());
			phpSystemJsonContent.setRetmsg(e.getMessage());
			phpSystemJsonContent.setRetcode(StatusCode.SUBMIT_ERROR);
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} catch (ServiceException e) {
			logger.error("业务错误",e);
			ErrorMessage errorMessage = new ErrorMessage();

			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}catch (ThreadException e) {
			logger.error("并发异常",e);
			phpSystemJsonContent.setRetmsg(e.getMessage());
			phpSystemJsonContent.setRetcode(StatusCode.THREAD_ERROR);

			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} catch (Exception e) {
			logger.error("未知错误",e);
			phpSystemJsonContent.setRetmsg(e.getMessage());
			phpSystemJsonContent.setRetcode(StatusCode.SYSTEM_UNKOWN_ERROR);
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}
		return;
	}

	@ResponseBody
	@RequestMapping(value = { "/issue" }, method = RequestMethod.POST)
	@ApiOperation(value = "资产发行申请且提交", httpMethod = "POST", response = AssetIssue.class, consumes = "application/json",produces="application/json")
	@ApiResponses(value = { @ApiResponse(code = StatusCode.THREAD_ERROR, message = "并发异常",response=StatusCode.class),
			@ApiResponse(code = StatusCode.PARAM_ERROR, message = "前端：传参出错",response=StatusCode.class),
			@ApiResponse(code = StatusCode.STATUS_SUCCESS, message = "成功",response=StatusCode.class),
			@ApiResponse(code =  StatusCode.SERVICE_EXCEPTION, message = "后端：未知业务错误",response=StatusCode.class) ,
			@ApiResponse(code = StatusCode.SUBMIT_ERROR, message = "后端：业务提交错误",response=StatusCode.class) })
	public void issue(@Valid @RequestBody AssetForm assetForm, BindingResult bindingResult) {
		PhpSystemJsonContent phpSystemJsonContent = new PhpSystemJsonContent();
		String jsonString = "";
		try {
			ConfigUtils.check();
			ValidatorUtil.validate(bindingResult);
		} catch (ParameterErrorException e1) {
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e1.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}catch (ServiceException e) {
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}

		try {
			AssetIssue assetIssue = assetService.issue(assetForm);
			phpSystemJsonContent.setData(assetIssue);
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);

		} catch (SubmitException e) {
			phpSystemJsonContent.setData(e.getData());
			phpSystemJsonContent.setRetmsg(e.getMessage());
			phpSystemJsonContent.setRetcode(StatusCode.SUBMIT_ERROR);
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} catch (ServiceException e) {
			logger.error("业务错误",e);
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} catch (ThreadException e) {
			logger.error("并发异常",e);
			phpSystemJsonContent.setRetmsg(e.getMessage());
			phpSystemJsonContent.setRetcode(StatusCode.THREAD_ERROR);

			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}catch (Exception e) {
			logger.error("未知错误",e);
			phpSystemJsonContent.setRetmsg(e.getMessage());
			phpSystemJsonContent.setRetcode(StatusCode.SYSTEM_UNKOWN_ERROR);
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}
		return;
	}

	@ResponseBody
	@RequestMapping(value = { "/issueSubmit" }, method = RequestMethod.POST)
	@ApiOperation(value = "资产发行只提交", httpMethod = "POST", response = AssetIssue.class, consumes = "application/json",produces=MediaType.APPLICATION_JSON_VALUE)
	@ApiResponses(value = { @ApiResponse(code = StatusCode.THREAD_ERROR, message = "并发异常",response=StatusCode.class),
			@ApiResponse(code = StatusCode.PARAM_ERROR, message = "前端：传参出错",response=StatusCode.class),
			@ApiResponse(code = StatusCode.STATUS_SUCCESS, message = "成功",response=StatusCode.class),
			@ApiResponse(code =  StatusCode.SERVICE_EXCEPTION, message = "后端：未知业务错误",response=StatusCode.class) ,
			@ApiResponse(code = StatusCode.SUBMIT_ERROR, message = "后端：业务提交错误",response=StatusCode.class) })
	public void issueSubmit(@Valid @RequestBody AssetSubmitForm assetForm, BindingResult bindingResult) {
		PhpSystemJsonContent phpSystemJsonContent = new PhpSystemJsonContent();
		String jsonString = "";
		try {
		ConfigUtils.check();
			ValidatorUtil.validate(bindingResult);
		} catch (ParameterErrorException e1) {
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e1.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} catch (ServiceException e) {
			logger.error("业务错误",e);
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}

		try {
			AssetIssue assetIssue = assetService.issueSubmit(assetForm);
			phpSystemJsonContent.setData(assetIssue);
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);

		} catch (ServiceException e) {
			logger.error("业务错误",e);
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}catch (ThreadException e) {
			logger.error("并发异常",e);
			phpSystemJsonContent.setRetmsg(e.getMessage());
			phpSystemJsonContent.setRetcode(StatusCode.THREAD_ERROR);

			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} catch (Exception e) {
			logger.error("未知错误",e);
			phpSystemJsonContent.setRetmsg(e.getMessage());
			phpSystemJsonContent.setRetcode(StatusCode.SYSTEM_UNKOWN_ERROR);
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}
		return;
	}

	@ResponseBody
	@RequestMapping(value = { "/transferSubmit" }, method = RequestMethod.POST)
	@ApiOperation(value = "资产转让只提交", httpMethod = "POST", response = AssetTransfer.class, consumes = "application/json",produces=MediaType.APPLICATION_JSON_VALUE)
	@ApiResponses(value = { @ApiResponse(code = StatusCode.THREAD_ERROR, message = "并发异常",response=StatusCode.class),
			@ApiResponse(code = StatusCode.PARAM_ERROR, message = "前端：传参出错",response=StatusCode.class),
			@ApiResponse(code = StatusCode.STATUS_SUCCESS, message = "成功",response=StatusCode.class),
			@ApiResponse(code =  StatusCode.SERVICE_EXCEPTION, message = "后端：未知业务错误",response=StatusCode.class) ,
			@ApiResponse(code = StatusCode.SUBMIT_ERROR, message = "后端：业务提交错误",response=StatusCode.class) })
	public void transferSubmit(@Valid @RequestBody AssetTransferSubmitForm assetForm, BindingResult bindingResult) {
		PhpSystemJsonContent phpSystemJsonContent = new PhpSystemJsonContent();
		String jsonString = "";
		try {
			ConfigUtils.check();
			ValidatorUtil.validate(bindingResult);
		} catch (ParameterErrorException e1) {
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e1.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} catch (ServiceException e) {
			logger.error("业务错误",e);
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}

		try {
			AssetTransfer assetTransfer = assetService.transSubmit(assetForm);
			phpSystemJsonContent.setData(assetTransfer);
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);

		} catch (ServiceException e) {
			logger.error("未知错误",e);
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} catch (ThreadException e) {
			logger.error("并发异常",e);
			phpSystemJsonContent.setRetmsg(e.getMessage());
			phpSystemJsonContent.setRetcode(StatusCode.THREAD_ERROR);

			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}catch (Exception e) {
			logger.error("未知错误",e);
			phpSystemJsonContent.setRetmsg(e.getMessage());
			phpSystemJsonContent.setRetcode(StatusCode.SYSTEM_UNKOWN_ERROR);
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}
		return;
	}

	@ResponseBody
	@RequestMapping(value = { "/settleSubmit" }, method = RequestMethod.POST)
	@ApiOperation(value = "资产兑付只提交", httpMethod = "POST", response = AssetSettle.class, consumes = "application/json",produces=MediaType.APPLICATION_JSON_VALUE)
	@ApiResponses(value = { @ApiResponse(code = StatusCode.THREAD_ERROR, message = "并发异常",response=StatusCode.class),
			@ApiResponse(code = StatusCode.PARAM_ERROR, message = "前端：传参出错",response=StatusCode.class),
			@ApiResponse(code = StatusCode.STATUS_SUCCESS, message = "成功",response=StatusCode.class),
			@ApiResponse(code =  StatusCode.SERVICE_EXCEPTION, message = "后端：未知业务错误",response=StatusCode.class) ,
			@ApiResponse(code = StatusCode.SUBMIT_ERROR, message = "后端：业务提交错误",response=StatusCode.class) })
	public void settleSubmit(@Valid @RequestBody AssetSettleSubmitForm assetForm, BindingResult bindingResult) {
		PhpSystemJsonContent phpSystemJsonContent = new PhpSystemJsonContent();
		String jsonString = "";
		try {
			ValidatorUtil.validate(bindingResult);
			ConfigUtils.check();
		} catch (ParameterErrorException e1) {
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e1.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} catch (ServiceException e) {
			logger.error("业务错误",e);
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}

		try {
			AssetSettle assetSettle = assetService.settleSubmit(assetForm);
			phpSystemJsonContent.setData(assetSettle);
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);

		} catch (ServiceException e) {
			
			phpSystemJsonContent = phpSystemJsonContent.setParameterError(e.getMessage());
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}catch (ThreadException e) {
			logger.error("并发异常",e);
			phpSystemJsonContent.setRetmsg(e.getMessage());
			phpSystemJsonContent.setRetcode(StatusCode.THREAD_ERROR);

			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		} catch (Exception e) {
			logger.error("未知错误",e);
			phpSystemJsonContent.setRetmsg(e.getMessage());
			phpSystemJsonContent.setRetcode(StatusCode.SYSTEM_UNKOWN_ERROR);
			jsonString = JSON.toJSONString(phpSystemJsonContent);
			ResponseUtil.echo(response, jsonString);
			return;
		}
		return;
	}
}
